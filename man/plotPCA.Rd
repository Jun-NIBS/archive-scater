% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting.R
\docType{methods}
\name{runPCA}
\alias{runPCA}
\alias{plotPCA}
\alias{plotPCASCE}
\alias{plotPCA,SingleCellExperiment-method}
\alias{plotPCA,SingleCellExperiment-method}
\alias{plotPCA}
\title{Plot PCA for a SingleCellExperiment object}
\usage{
runPCA(object, ntop = 500, ncomponents = 2, exprs_values = "logcounts",
  feature_set = NULL, scale_features = TRUE, pca_data_input = "logcounts",
  selected_variables = NULL, detect_outliers = FALSE)

plotPCASCE(object, colour_by = NULL, shape_by = NULL, size_by = NULL,
  return_SCE = FALSE, draw_plot = TRUE, theme_size = 10,
  legend = "auto", rerun = FALSE, ncomponents = 2,
  detect_outliers = FALSE, ...)

\S4method{plotPCA}{SingleCellExperiment}(object, colour_by = NULL,
  shape_by = NULL, size_by = NULL, return_SCE = FALSE, draw_plot = TRUE,
  theme_size = 10, legend = "auto", rerun = FALSE, ncomponents = 2,
  detect_outliers = FALSE, ...)
}
\arguments{
\item{object}{an \code{\link{SingleCellExperiment}} object}

\item{ntop}{numeric scalar indicating the number of most variable features to
use for the PCA. Default is \code{500}, but any \code{ntop} argument is
overrided if the \code{feature_set} argument is non-NULL.}

\item{ncomponents}{numeric scalar indicating the number of principal
components to plot, starting from the first principal component. Default is
2. If \code{ncomponents} is 2, then a scatterplot of PC2 vs PC1 is produced.
If \code{ncomponents} is greater than 2, a pairs plots for the top components
is produced.}

\item{exprs_values}{character string indicating which values should be used
as the expression values for this plot. Valid arguments are \code{"tpm"}
(transcripts per million), \code{"norm_tpm"} (normalised TPM
values), \code{"fpkm"} (FPKM values), \code{"norm_fpkm"} (normalised FPKM
values), \code{"counts"} (counts for each feature), \code{"norm_counts"},
\code{"cpm"} (counts-per-million), \code{"norm_cpm"} (normalised
counts-per-million), \code{"logcounts"} (log-transformed count data; default),
\code{"norm_exprs"} (normalised
expression values) or \code{"stand_exprs"} (standardised expression values)
or any other named element of the \code{assays} slot of the \code{SingleCellExperiment}
object that can be accessed with the \code{assay} function.}

\item{feature_set}{character, numeric or logical vector indicating a set of
features to use for the PCA. If character, entries must all be in
\code{featureNames(object)}. If numeric, values are taken to be indices for
features. If logical, vector is used to index features and should have length
equal to \code{nrow(object)}.}

\item{scale_features}{logical, should the expression values be standardised
so that each feature has unit variance? Default is \code{TRUE}.}

\item{pca_data_input}{character argument defining which data should be used
as input for the PCA. Possible options are \code{"logcounts"} (default), which
uses log-count data to produce a PCA at the cell level; \code{"coldata"} or
\code{"pdata"} (for backwards compatibility) which uses numeric variables
from \code{colData(object)} to do PCA at the cell level; and
\code{"rowdata"} which uses numeric variables from \code{rowData(object)} to
do PCA at the feature level.}

\item{selected_variables}{character vector indicating which variables in
\code{colData(object)} to use for the phenotype-data based PCA. Ignored if
the argument \code{pca_data_input} is anything other than \code{"pdata"}.}

\item{detect_outliers}{logical, should outliers be detected in the PC plot?
Only an option when \code{pca_data_input} argument is \code{"pdata"}. Default
is \code{FALSE}.}

\item{colour_by}{character string defining the column of \code{pData(object)} to
be used as a factor by which to colour the points in the plot. Alternatively,
a data frame with one column, containing values to map to colours for all cells.}

\item{shape_by}{character string defining the column of \code{pData(object)} to
be used as a factor by which to define the shape of the points in the plot.
Alternatively, a data frame with one column containing values to map to shapes.}

\item{size_by}{character string defining the column of \code{pData(object)} to
be used as a factor by which to define the size of points in the plot.
Alternatively, a data frame with one column containing values to map to sizes.}

\item{return_SCE}{logical, should the function return an \code{SingleCellExperiment}
object with principal component values for cells in the
\code{reducedDim} slot. Default is \code{FALSE}, in which case a
\code{ggplot} object is returned.}

\item{draw_plot}{logical, should the plot be drawn on the current graphics
device? Only used if \code{return_SCE} is \code{TRUE}, otherwise the plot
is always produced.}

\item{theme_size}{numeric scalar giving default font size for plotting theme
(default is 10).}

\item{legend}{character, specifying how the legend(s) be shown? Default is
\code{"auto"}, which hides legends that have only one level and shows others.
Alternatives are "all" (show all legends) or "none" (hide all legends).}

\item{rerun}{logical, should PCA be recomputed even if \code{object} contains a
"PCA" element in the \code{reducedDims} slot?}

\item{...}{further arguments passed to \code{\link{plotPCASCE}}}
}
\value{
either a ggplot plot object or an SingleCellExperiment object
}
\description{
Produce a principal components analysis (PCA) plot of two or more principal
components for an \code{\link{SingleCellExperiment}} dataset.
}
\details{
The function \code{\link{prcomp}} is used internally to do the PCA.
The function checks whether the \code{object} has standardised
expression values (by looking at \code{stand_exprs(object)}). If yes, the
existing standardised expression values are used for the PCA. If not, then
standardised expression values are computed using \code{\link{scale}} (with
feature-wise unit variances or not according to the \code{scale_features}
argument), added to the object and PCA is done using these new standardised
expression values.

If the arguments \code{detect_outliers} and \code{return_SCE} are both
\code{TRUE}, then the element \code{$outlier} is added to the pData
(phenotype data) slot of the \code{SingleCellExperiment} object. This element contains
indicator values about whether or not each cell has been designated as an
outlier based on the PCA. These values can be accessed for filtering
low quality cells with, for example, \code{example_sce$outlier}.
}
\examples{
## Set up an example SingleCellExperiment
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts), colData = sc_example_cell_info)
example_sce <- normalize(example_sce)
drop_genes <- apply(exprs(example_sce), 1, function(x) {var(x) == 0})
example_sce <- example_sce[!drop_genes, ]

## Examples plotting PC1 and PC2
plotPCA(example_sce)
plotPCA(example_sce, colour_by = "Cell_Cycle")
plotPCA(example_sce, colour_by = "Cell_Cycle", shape_by = "Treatment")
plotPCA(example_sce, colour_by = "Cell_Cycle", shape_by = "Treatment",
size_by = "Mutation_Status")
plotPCA(example_sce, shape_by = "Treatment", size_by = "Mutation_Status")
plotPCA(example_sce, feature_set = 1:100, colour_by = "Treatment",
shape_by = "Mutation_Status")

## experiment with legend
example_subset <- example_sce[, example_sce$Treatment == "treat1"]
plotPCA(example_subset, colour_by = "Cell_Cycle", shape_by = "Treatment", legend = "all")

plotPCA(example_sce, shape_by = "Treatment", return_SCE = TRUE)

## Examples plotting more than 2 PCs
plotPCA(example_sce, ncomponents = 8)
plotPCA(example_sce, ncomponents = 4, colour_by = "Treatment",
shape_by = "Mutation_Status")

}
